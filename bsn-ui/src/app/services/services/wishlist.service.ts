/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addBookToWishlist } from '../fn/wishlist/add-book-to-wishlist';
import { AddBookToWishlist$Params } from '../fn/wishlist/add-book-to-wishlist';
import { getWishlistedBooksOfUser } from '../fn/wishlist/get-wishlisted-books-of-user';
import { GetWishlistedBooksOfUser$Params } from '../fn/wishlist/get-wishlisted-books-of-user';
import { PageResponseWishlistEntryResponse } from '../models/page-response-wishlist-entry-response';
import { removeBookFromWishlist } from '../fn/wishlist/remove-book-from-wishlist';
import { RemoveBookFromWishlist$Params } from '../fn/wishlist/remove-book-from-wishlist';
import { WishlistEntryResponse } from '../models/wishlist-entry-response';

@Injectable({ providedIn: 'root' })
export class WishlistService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addBookToWishlist()` */
  static readonly AddBookToWishlistPath = '/wishlist/add/{bookId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addBookToWishlist()` instead.
   *
   * This method doesn't expect any request body.
   */
  addBookToWishlist$Response(params: AddBookToWishlist$Params, context?: HttpContext): Observable<StrictHttpResponse<WishlistEntryResponse>> {
    return addBookToWishlist(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addBookToWishlist$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addBookToWishlist(params: AddBookToWishlist$Params, context?: HttpContext): Observable<WishlistEntryResponse> {
    return this.addBookToWishlist$Response(params, context).pipe(
      map((r: StrictHttpResponse<WishlistEntryResponse>): WishlistEntryResponse => r.body)
    );
  }

  /** Path part for operation `getWishlistedBooksOfUser()` */
  static readonly GetWishlistedBooksOfUserPath = '/wishlist/get/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWishlistedBooksOfUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWishlistedBooksOfUser$Response(params?: GetWishlistedBooksOfUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseWishlistEntryResponse>> {
    return getWishlistedBooksOfUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWishlistedBooksOfUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWishlistedBooksOfUser(params?: GetWishlistedBooksOfUser$Params, context?: HttpContext): Observable<PageResponseWishlistEntryResponse> {
    return this.getWishlistedBooksOfUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseWishlistEntryResponse>): PageResponseWishlistEntryResponse => r.body)
    );
  }

  /** Path part for operation `removeBookFromWishlist()` */
  static readonly RemoveBookFromWishlistPath = '/wishlist/delete/{bookId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeBookFromWishlist()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeBookFromWishlist$Response(params: RemoveBookFromWishlist$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeBookFromWishlist(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeBookFromWishlist$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeBookFromWishlist(params: RemoveBookFromWishlist$Params, context?: HttpContext): Observable<void> {
    return this.removeBookFromWishlist$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
