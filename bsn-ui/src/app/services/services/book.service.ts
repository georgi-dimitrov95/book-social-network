/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BookResponse } from '../models/book-response';
import { borrowBook } from '../fn/book/borrow-book';
import { BorrowBook$Params } from '../fn/book/borrow-book';
import { borrowBookByTitleFromUser } from '../fn/book/borrow-book-by-title-from-user';
import { BorrowBookByTitleFromUser$Params } from '../fn/book/borrow-book-by-title-from-user';
import { BorrowedBookResponse } from '../models/borrowed-book-response';
import { findAllBooksFromOtherOwners } from '../fn/book/find-all-books-from-other-owners';
import { FindAllBooksFromOtherOwners$Params } from '../fn/book/find-all-books-from-other-owners';
import { findAllBooksOfUser } from '../fn/book/find-all-books-of-user';
import { FindAllBooksOfUser$Params } from '../fn/book/find-all-books-of-user';
import { findAllBorrowedBooksByUser } from '../fn/book/find-all-borrowed-books-by-user';
import { FindAllBorrowedBooksByUser$Params } from '../fn/book/find-all-borrowed-books-by-user';
import { findAllCurrentlyBorrowedBooksByUser } from '../fn/book/find-all-currently-borrowed-books-by-user';
import { FindAllCurrentlyBorrowedBooksByUser$Params } from '../fn/book/find-all-currently-borrowed-books-by-user';
import { findAllCurrentlyLoanedBooksByUser } from '../fn/book/find-all-currently-loaned-books-by-user';
import { FindAllCurrentlyLoanedBooksByUser$Params } from '../fn/book/find-all-currently-loaned-books-by-user';
import { findAllLoanedAndReturnedBooksByUser } from '../fn/book/find-all-loaned-and-returned-books-by-user';
import { FindAllLoanedAndReturnedBooksByUser$Params } from '../fn/book/find-all-loaned-and-returned-books-by-user';
import { findAllLoanedBooksByUser } from '../fn/book/find-all-loaned-books-by-user';
import { FindAllLoanedBooksByUser$Params } from '../fn/book/find-all-loaned-books-by-user';
import { findAllReturnedBooksByUser } from '../fn/book/find-all-returned-books-by-user';
import { FindAllReturnedBooksByUser$Params } from '../fn/book/find-all-returned-books-by-user';
import { findBookById } from '../fn/book/find-book-by-id';
import { FindBookById$Params } from '../fn/book/find-book-by-id';
import { getAllBooksByAuthor } from '../fn/book/get-all-books-by-author';
import { GetAllBooksByAuthor$Params } from '../fn/book/get-all-books-by-author';
import { PageResponseBookResponse } from '../models/page-response-book-response';
import { PageResponseBorrowedBookResponse } from '../models/page-response-borrowed-book-response';
import { returnBook } from '../fn/book/return-book';
import { ReturnBook$Params } from '../fn/book/return-book';
import { saveBook } from '../fn/book/save-book';
import { SaveBook$Params } from '../fn/book/save-book';
import { updateBookArchivedStatus } from '../fn/book/update-book-archived-status';
import { UpdateBookArchivedStatus$Params } from '../fn/book/update-book-archived-status';
import { updateBookShareableStatus } from '../fn/book/update-book-shareable-status';
import { UpdateBookShareableStatus$Params } from '../fn/book/update-book-shareable-status';
import { uploadBookCoverPicture } from '../fn/book/upload-book-cover-picture';
import { UploadBookCoverPicture$Params } from '../fn/book/upload-book-cover-picture';

@Injectable({ providedIn: 'root' })
export class BookService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `uploadBookCoverPicture()` */
  static readonly UploadBookCoverPicturePath = '/books/cover/{bookId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadBookCoverPicture()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadBookCoverPicture$Response(params: UploadBookCoverPicture$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadBookCoverPicture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadBookCoverPicture$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadBookCoverPicture(params: UploadBookCoverPicture$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadBookCoverPicture$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `borrowBook()` */
  static readonly BorrowBookPath = '/books/borrow/{bookId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `borrowBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowBook$Response(params: BorrowBook$Params, context?: HttpContext): Observable<StrictHttpResponse<BorrowedBookResponse>> {
    return borrowBook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `borrowBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowBook(params: BorrowBook$Params, context?: HttpContext): Observable<BorrowedBookResponse> {
    return this.borrowBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<BorrowedBookResponse>): BorrowedBookResponse => r.body)
    );
  }

  /** Path part for operation `borrowBookByTitleFromUser()` */
  static readonly BorrowBookByTitleFromUserPath = '/books/borrow-from-user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `borrowBookByTitleFromUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowBookByTitleFromUser$Response(params: BorrowBookByTitleFromUser$Params, context?: HttpContext): Observable<StrictHttpResponse<BorrowedBookResponse>> {
    return borrowBookByTitleFromUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `borrowBookByTitleFromUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowBookByTitleFromUser(params: BorrowBookByTitleFromUser$Params, context?: HttpContext): Observable<BorrowedBookResponse> {
    return this.borrowBookByTitleFromUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<BorrowedBookResponse>): BorrowedBookResponse => r.body)
    );
  }

  /** Path part for operation `saveBook()` */
  static readonly SaveBookPath = '/books/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveBook()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveBook$Response(params: SaveBook$Params, context?: HttpContext): Observable<StrictHttpResponse<BookResponse>> {
    return saveBook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveBook$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveBook(params: SaveBook$Params, context?: HttpContext): Observable<BookResponse> {
    return this.saveBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookResponse>): BookResponse => r.body)
    );
  }

  /** Path part for operation `updateBookShareableStatus()` */
  static readonly UpdateBookShareableStatusPath = '/books/shareable/{bookId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBookShareableStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateBookShareableStatus$Response(params: UpdateBookShareableStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<BookResponse>> {
    return updateBookShareableStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBookShareableStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateBookShareableStatus(params: UpdateBookShareableStatus$Params, context?: HttpContext): Observable<BookResponse> {
    return this.updateBookShareableStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookResponse>): BookResponse => r.body)
    );
  }

  /** Path part for operation `returnBook()` */
  static readonly ReturnBookPath = '/books/return/{bookId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `returnBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBook$Response(params: ReturnBook$Params, context?: HttpContext): Observable<StrictHttpResponse<BorrowedBookResponse>> {
    return returnBook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `returnBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBook(params: ReturnBook$Params, context?: HttpContext): Observable<BorrowedBookResponse> {
    return this.returnBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<BorrowedBookResponse>): BorrowedBookResponse => r.body)
    );
  }

  /** Path part for operation `updateBookArchivedStatus()` */
  static readonly UpdateBookArchivedStatusPath = '/books/archived/{bookId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBookArchivedStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateBookArchivedStatus$Response(params: UpdateBookArchivedStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<BookResponse>> {
    return updateBookArchivedStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBookArchivedStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateBookArchivedStatus(params: UpdateBookArchivedStatus$Params, context?: HttpContext): Observable<BookResponse> {
    return this.updateBookArchivedStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookResponse>): BookResponse => r.body)
    );
  }

  /** Path part for operation `getAllBooksByAuthor()` */
  static readonly GetAllBooksByAuthorPath = '/books';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllBooksByAuthor()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBooksByAuthor$Response(params: GetAllBooksByAuthor$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BookResponse>>> {
    return getAllBooksByAuthor(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllBooksByAuthor$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBooksByAuthor(params: GetAllBooksByAuthor$Params, context?: HttpContext): Observable<Array<BookResponse>> {
    return this.getAllBooksByAuthor$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BookResponse>>): Array<BookResponse> => r.body)
    );
  }

  /** Path part for operation `findAllBooksOfUser()` */
  static readonly FindAllBooksOfUserPath = '/books/user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBooksOfUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooksOfUser$Response(params?: FindAllBooksOfUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBookResponse>> {
    return findAllBooksOfUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBooksOfUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooksOfUser(params?: FindAllBooksOfUser$Params, context?: HttpContext): Observable<PageResponseBookResponse> {
    return this.findAllBooksOfUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBookResponse>): PageResponseBookResponse => r.body)
    );
  }

  /** Path part for operation `findAllLoanedAndReturnedBooksByUser()` */
  static readonly FindAllLoanedAndReturnedBooksByUserPath = '/books/loaned-returned';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllLoanedAndReturnedBooksByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllLoanedAndReturnedBooksByUser$Response(params?: FindAllLoanedAndReturnedBooksByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedBookResponse>> {
    return findAllLoanedAndReturnedBooksByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllLoanedAndReturnedBooksByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllLoanedAndReturnedBooksByUser(params?: FindAllLoanedAndReturnedBooksByUser$Params, context?: HttpContext): Observable<PageResponseBorrowedBookResponse> {
    return this.findAllLoanedAndReturnedBooksByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedBookResponse>): PageResponseBorrowedBookResponse => r.body)
    );
  }

  /** Path part for operation `findAllCurrentlyLoanedBooksByUser()` */
  static readonly FindAllCurrentlyLoanedBooksByUserPath = '/books/loaned-currently';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllCurrentlyLoanedBooksByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCurrentlyLoanedBooksByUser$Response(params?: FindAllCurrentlyLoanedBooksByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedBookResponse>> {
    return findAllCurrentlyLoanedBooksByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllCurrentlyLoanedBooksByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCurrentlyLoanedBooksByUser(params?: FindAllCurrentlyLoanedBooksByUser$Params, context?: HttpContext): Observable<PageResponseBorrowedBookResponse> {
    return this.findAllCurrentlyLoanedBooksByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedBookResponse>): PageResponseBorrowedBookResponse => r.body)
    );
  }

  /** Path part for operation `findAllLoanedBooksByUser()` */
  static readonly FindAllLoanedBooksByUserPath = '/books/loaned-all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllLoanedBooksByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllLoanedBooksByUser$Response(params?: FindAllLoanedBooksByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedBookResponse>> {
    return findAllLoanedBooksByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllLoanedBooksByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllLoanedBooksByUser(params?: FindAllLoanedBooksByUser$Params, context?: HttpContext): Observable<PageResponseBorrowedBookResponse> {
    return this.findAllLoanedBooksByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedBookResponse>): PageResponseBorrowedBookResponse => r.body)
    );
  }

  /** Path part for operation `findBookById()` */
  static readonly FindBookByIdPath = '/books/get/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findBookById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findBookById$Response(params: FindBookById$Params, context?: HttpContext): Observable<StrictHttpResponse<BookResponse>> {
    return findBookById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findBookById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findBookById(params: FindBookById$Params, context?: HttpContext): Observable<BookResponse> {
    return this.findBookById$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookResponse>): BookResponse => r.body)
    );
  }

  /** Path part for operation `findAllBooksFromOtherOwners()` */
  static readonly FindAllBooksFromOtherOwnersPath = '/books/get/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBooksFromOtherOwners()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooksFromOtherOwners$Response(params?: FindAllBooksFromOtherOwners$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBookResponse>> {
    return findAllBooksFromOtherOwners(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBooksFromOtherOwners$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBooksFromOtherOwners(params?: FindAllBooksFromOtherOwners$Params, context?: HttpContext): Observable<PageResponseBookResponse> {
    return this.findAllBooksFromOtherOwners$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBookResponse>): PageResponseBookResponse => r.body)
    );
  }

  /** Path part for operation `findAllReturnedBooksByUser()` */
  static readonly FindAllReturnedBooksByUserPath = '/books/borrowed-returned';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllReturnedBooksByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedBooksByUser$Response(params?: FindAllReturnedBooksByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedBookResponse>> {
    return findAllReturnedBooksByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllReturnedBooksByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedBooksByUser(params?: FindAllReturnedBooksByUser$Params, context?: HttpContext): Observable<PageResponseBorrowedBookResponse> {
    return this.findAllReturnedBooksByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedBookResponse>): PageResponseBorrowedBookResponse => r.body)
    );
  }

  /** Path part for operation `findAllCurrentlyBorrowedBooksByUser()` */
  static readonly FindAllCurrentlyBorrowedBooksByUserPath = '/books/borrowed-currently';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllCurrentlyBorrowedBooksByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCurrentlyBorrowedBooksByUser$Response(params?: FindAllCurrentlyBorrowedBooksByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedBookResponse>> {
    return findAllCurrentlyBorrowedBooksByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllCurrentlyBorrowedBooksByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCurrentlyBorrowedBooksByUser(params?: FindAllCurrentlyBorrowedBooksByUser$Params, context?: HttpContext): Observable<PageResponseBorrowedBookResponse> {
    return this.findAllCurrentlyBorrowedBooksByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedBookResponse>): PageResponseBorrowedBookResponse => r.body)
    );
  }

  /** Path part for operation `findAllBorrowedBooksByUser()` */
  static readonly FindAllBorrowedBooksByUserPath = '/books/borrowed-all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBorrowedBooksByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedBooksByUser$Response(params?: FindAllBorrowedBooksByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedBookResponse>> {
    return findAllBorrowedBooksByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBorrowedBooksByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedBooksByUser(params?: FindAllBorrowedBooksByUser$Params, context?: HttpContext): Observable<PageResponseBorrowedBookResponse> {
    return this.findAllBorrowedBooksByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedBookResponse>): PageResponseBorrowedBookResponse => r.body)
    );
  }

}
